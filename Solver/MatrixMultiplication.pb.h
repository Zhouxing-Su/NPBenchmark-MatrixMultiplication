// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatrixMultiplication.proto

#ifndef PROTOBUF_INCLUDED_MatrixMultiplication_2eproto
#define PROTOBUF_INCLUDED_MatrixMultiplication_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MatrixMultiplication_2eproto 

namespace protobuf_MatrixMultiplication_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MatrixMultiplication_2eproto
namespace pb {
class MatrixMultiplication;
class MatrixMultiplicationDefaultTypeInternal;
extern MatrixMultiplicationDefaultTypeInternal _MatrixMultiplication_default_instance_;
class MatrixMultiplication_Input;
class MatrixMultiplication_InputDefaultTypeInternal;
extern MatrixMultiplication_InputDefaultTypeInternal _MatrixMultiplication_Input_default_instance_;
class MatrixMultiplication_Intermediate;
class MatrixMultiplication_IntermediateDefaultTypeInternal;
extern MatrixMultiplication_IntermediateDefaultTypeInternal _MatrixMultiplication_Intermediate_default_instance_;
class MatrixMultiplication_LinearExpression;
class MatrixMultiplication_LinearExpressionDefaultTypeInternal;
extern MatrixMultiplication_LinearExpressionDefaultTypeInternal _MatrixMultiplication_LinearExpression_default_instance_;
class MatrixMultiplication_Output;
class MatrixMultiplication_OutputDefaultTypeInternal;
extern MatrixMultiplication_OutputDefaultTypeInternal _MatrixMultiplication_Output_default_instance_;
class MatrixMultiplication_Term;
class MatrixMultiplication_TermDefaultTypeInternal;
extern MatrixMultiplication_TermDefaultTypeInternal _MatrixMultiplication_Term_default_instance_;
class Submission;
class SubmissionDefaultTypeInternal;
extern SubmissionDefaultTypeInternal _Submission_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::MatrixMultiplication* Arena::CreateMaybeMessage<::pb::MatrixMultiplication>(Arena*);
template<> ::pb::MatrixMultiplication_Input* Arena::CreateMaybeMessage<::pb::MatrixMultiplication_Input>(Arena*);
template<> ::pb::MatrixMultiplication_Intermediate* Arena::CreateMaybeMessage<::pb::MatrixMultiplication_Intermediate>(Arena*);
template<> ::pb::MatrixMultiplication_LinearExpression* Arena::CreateMaybeMessage<::pb::MatrixMultiplication_LinearExpression>(Arena*);
template<> ::pb::MatrixMultiplication_Output* Arena::CreateMaybeMessage<::pb::MatrixMultiplication_Output>(Arena*);
template<> ::pb::MatrixMultiplication_Term* Arena::CreateMaybeMessage<::pb::MatrixMultiplication_Term>(Arena*);
template<> ::pb::Submission* Arena::CreateMaybeMessage<::pb::Submission>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class MatrixMultiplication_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication.Input) */ {
 public:
  MatrixMultiplication_Input();
  virtual ~MatrixMultiplication_Input();

  MatrixMultiplication_Input(const MatrixMultiplication_Input& from);

  inline MatrixMultiplication_Input& operator=(const MatrixMultiplication_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication_Input(MatrixMultiplication_Input&& from) noexcept
    : MatrixMultiplication_Input() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication_Input& operator=(MatrixMultiplication_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication_Input* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication_Input*>(
               &_MatrixMultiplication_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MatrixMultiplication_Input* other);
  friend void swap(MatrixMultiplication_Input& a, MatrixMultiplication_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication_Input* New() const final {
    return CreateMaybeMessage<MatrixMultiplication_Input>(NULL);
  }

  MatrixMultiplication_Input* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication_Input>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication_Input& from);
  void MergeFrom(const MatrixMultiplication_Input& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rowNumA = 1;
  void clear_rownuma();
  static const int kRowNumAFieldNumber = 1;
  ::google::protobuf::int32 rownuma() const;
  void set_rownuma(::google::protobuf::int32 value);

  // int32 numRCAB = 2;
  void clear_numrcab();
  static const int kNumRCABFieldNumber = 2;
  ::google::protobuf::int32 numrcab() const;
  void set_numrcab(::google::protobuf::int32 value);

  // int32 colNumB = 3;
  void clear_colnumb();
  static const int kColNumBFieldNumber = 3;
  ::google::protobuf::int32 colnumb() const;
  void set_colnumb(::google::protobuf::int32 value);

  // int32 refMultiplicationNum = 4;
  void clear_refmultiplicationnum();
  static const int kRefMultiplicationNumFieldNumber = 4;
  ::google::protobuf::int32 refmultiplicationnum() const;
  void set_refmultiplicationnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rownuma_;
  ::google::protobuf::int32 numrcab_;
  ::google::protobuf::int32 colnumb_;
  ::google::protobuf::int32 refmultiplicationnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixMultiplication_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication.Output) */ {
 public:
  MatrixMultiplication_Output();
  virtual ~MatrixMultiplication_Output();

  MatrixMultiplication_Output(const MatrixMultiplication_Output& from);

  inline MatrixMultiplication_Output& operator=(const MatrixMultiplication_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication_Output(MatrixMultiplication_Output&& from) noexcept
    : MatrixMultiplication_Output() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication_Output& operator=(MatrixMultiplication_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication_Output* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication_Output*>(
               &_MatrixMultiplication_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MatrixMultiplication_Output* other);
  friend void swap(MatrixMultiplication_Output& a, MatrixMultiplication_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication_Output* New() const final {
    return CreateMaybeMessage<MatrixMultiplication_Output>(NULL);
  }

  MatrixMultiplication_Output* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication_Output>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication_Output& from);
  void MergeFrom(const MatrixMultiplication_Output& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MatrixMultiplication.Intermediate intermediates = 1;
  int intermediates_size() const;
  void clear_intermediates();
  static const int kIntermediatesFieldNumber = 1;
  ::pb::MatrixMultiplication_Intermediate* mutable_intermediates(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Intermediate >*
      mutable_intermediates();
  const ::pb::MatrixMultiplication_Intermediate& intermediates(int index) const;
  ::pb::MatrixMultiplication_Intermediate* add_intermediates();
  const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Intermediate >&
      intermediates() const;

  // repeated .pb.MatrixMultiplication.LinearExpression exprs = 2;
  int exprs_size() const;
  void clear_exprs();
  static const int kExprsFieldNumber = 2;
  ::pb::MatrixMultiplication_LinearExpression* mutable_exprs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_LinearExpression >*
      mutable_exprs();
  const ::pb::MatrixMultiplication_LinearExpression& exprs(int index) const;
  ::pb::MatrixMultiplication_LinearExpression* add_exprs();
  const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_LinearExpression >&
      exprs() const;

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Intermediate > intermediates_;
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_LinearExpression > exprs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixMultiplication_LinearExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication.LinearExpression) */ {
 public:
  MatrixMultiplication_LinearExpression();
  virtual ~MatrixMultiplication_LinearExpression();

  MatrixMultiplication_LinearExpression(const MatrixMultiplication_LinearExpression& from);

  inline MatrixMultiplication_LinearExpression& operator=(const MatrixMultiplication_LinearExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication_LinearExpression(MatrixMultiplication_LinearExpression&& from) noexcept
    : MatrixMultiplication_LinearExpression() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication_LinearExpression& operator=(MatrixMultiplication_LinearExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication_LinearExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication_LinearExpression* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication_LinearExpression*>(
               &_MatrixMultiplication_LinearExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MatrixMultiplication_LinearExpression* other);
  friend void swap(MatrixMultiplication_LinearExpression& a, MatrixMultiplication_LinearExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication_LinearExpression* New() const final {
    return CreateMaybeMessage<MatrixMultiplication_LinearExpression>(NULL);
  }

  MatrixMultiplication_LinearExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication_LinearExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication_LinearExpression& from);
  void MergeFrom(const MatrixMultiplication_LinearExpression& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication_LinearExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MatrixMultiplication.Term terms = 1;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 1;
  ::pb::MatrixMultiplication_Term* mutable_terms(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Term >*
      mutable_terms();
  const ::pb::MatrixMultiplication_Term& terms(int index) const;
  ::pb::MatrixMultiplication_Term* add_terms();
  const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Term >&
      terms() const;

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication.LinearExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Term > terms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixMultiplication_Term : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication.Term) */ {
 public:
  MatrixMultiplication_Term();
  virtual ~MatrixMultiplication_Term();

  MatrixMultiplication_Term(const MatrixMultiplication_Term& from);

  inline MatrixMultiplication_Term& operator=(const MatrixMultiplication_Term& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication_Term(MatrixMultiplication_Term&& from) noexcept
    : MatrixMultiplication_Term() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication_Term& operator=(MatrixMultiplication_Term&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication_Term& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication_Term* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication_Term*>(
               &_MatrixMultiplication_Term_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MatrixMultiplication_Term* other);
  friend void swap(MatrixMultiplication_Term& a, MatrixMultiplication_Term& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication_Term* New() const final {
    return CreateMaybeMessage<MatrixMultiplication_Term>(NULL);
  }

  MatrixMultiplication_Term* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication_Term>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication_Term& from);
  void MergeFrom(const MatrixMultiplication_Term& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication_Term* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double coef = 1;
  void clear_coef();
  static const int kCoefFieldNumber = 1;
  double coef() const;
  void set_coef(double value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication.Term)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double coef_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixMultiplication_Intermediate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication.Intermediate) */ {
 public:
  MatrixMultiplication_Intermediate();
  virtual ~MatrixMultiplication_Intermediate();

  MatrixMultiplication_Intermediate(const MatrixMultiplication_Intermediate& from);

  inline MatrixMultiplication_Intermediate& operator=(const MatrixMultiplication_Intermediate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication_Intermediate(MatrixMultiplication_Intermediate&& from) noexcept
    : MatrixMultiplication_Intermediate() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication_Intermediate& operator=(MatrixMultiplication_Intermediate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication_Intermediate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication_Intermediate* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication_Intermediate*>(
               &_MatrixMultiplication_Intermediate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MatrixMultiplication_Intermediate* other);
  friend void swap(MatrixMultiplication_Intermediate& a, MatrixMultiplication_Intermediate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication_Intermediate* New() const final {
    return CreateMaybeMessage<MatrixMultiplication_Intermediate>(NULL);
  }

  MatrixMultiplication_Intermediate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication_Intermediate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication_Intermediate& from);
  void MergeFrom(const MatrixMultiplication_Intermediate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication_Intermediate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.MatrixMultiplication.LinearExpression sumA = 1;
  bool has_suma() const;
  void clear_suma();
  static const int kSumAFieldNumber = 1;
  private:
  const ::pb::MatrixMultiplication_LinearExpression& _internal_suma() const;
  public:
  const ::pb::MatrixMultiplication_LinearExpression& suma() const;
  ::pb::MatrixMultiplication_LinearExpression* release_suma();
  ::pb::MatrixMultiplication_LinearExpression* mutable_suma();
  void set_allocated_suma(::pb::MatrixMultiplication_LinearExpression* suma);

  // .pb.MatrixMultiplication.LinearExpression sumB = 2;
  bool has_sumb() const;
  void clear_sumb();
  static const int kSumBFieldNumber = 2;
  private:
  const ::pb::MatrixMultiplication_LinearExpression& _internal_sumb() const;
  public:
  const ::pb::MatrixMultiplication_LinearExpression& sumb() const;
  ::pb::MatrixMultiplication_LinearExpression* release_sumb();
  ::pb::MatrixMultiplication_LinearExpression* mutable_sumb();
  void set_allocated_sumb(::pb::MatrixMultiplication_LinearExpression* sumb);

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication.Intermediate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::MatrixMultiplication_LinearExpression* suma_;
  ::pb::MatrixMultiplication_LinearExpression* sumb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixMultiplication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MatrixMultiplication) */ {
 public:
  MatrixMultiplication();
  virtual ~MatrixMultiplication();

  MatrixMultiplication(const MatrixMultiplication& from);

  inline MatrixMultiplication& operator=(const MatrixMultiplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixMultiplication(MatrixMultiplication&& from) noexcept
    : MatrixMultiplication() {
    *this = ::std::move(from);
  }

  inline MatrixMultiplication& operator=(MatrixMultiplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMultiplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixMultiplication* internal_default_instance() {
    return reinterpret_cast<const MatrixMultiplication*>(
               &_MatrixMultiplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MatrixMultiplication* other);
  friend void swap(MatrixMultiplication& a, MatrixMultiplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixMultiplication* New() const final {
    return CreateMaybeMessage<MatrixMultiplication>(NULL);
  }

  MatrixMultiplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixMultiplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixMultiplication& from);
  void MergeFrom(const MatrixMultiplication& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMultiplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatrixMultiplication_Input Input;
  typedef MatrixMultiplication_Output Output;
  typedef MatrixMultiplication_LinearExpression LinearExpression;
  typedef MatrixMultiplication_Term Term;
  typedef MatrixMultiplication_Intermediate Intermediate;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.MatrixMultiplication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Submission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Submission) */ {
 public:
  Submission();
  virtual ~Submission();

  Submission(const Submission& from);

  inline Submission& operator=(const Submission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Submission(Submission&& from) noexcept
    : Submission() {
    *this = ::std::move(from);
  }

  inline Submission& operator=(Submission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Submission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Submission* internal_default_instance() {
    return reinterpret_cast<const Submission*>(
               &_Submission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Submission* other);
  friend void swap(Submission& a, Submission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submission* New() const final {
    return CreateMaybeMessage<Submission>(NULL);
  }

  Submission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Submission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Submission& from);
  void MergeFrom(const Submission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string algorithm = 2;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm(::std::string&& value);
  #endif
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // string thread = 3;
  void clear_thread();
  static const int kThreadFieldNumber = 3;
  const ::std::string& thread() const;
  void set_thread(const ::std::string& value);
  #if LANG_CXX11
  void set_thread(::std::string&& value);
  #endif
  void set_thread(const char* value);
  void set_thread(const char* value, size_t size);
  ::std::string* mutable_thread();
  ::std::string* release_thread();
  void set_allocated_thread(::std::string* thread);

  // string cpu = 4;
  void clear_cpu();
  static const int kCpuFieldNumber = 4;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string ram = 5;
  void clear_ram();
  static const int kRamFieldNumber = 5;
  const ::std::string& ram() const;
  void set_ram(const ::std::string& value);
  #if LANG_CXX11
  void set_ram(::std::string&& value);
  #endif
  void set_ram(const char* value);
  void set_ram(const char* value, size_t size);
  ::std::string* mutable_ram();
  ::std::string* release_ram();
  void set_allocated_ram(::std::string* ram);

  // string language = 6;
  void clear_language();
  static const int kLanguageFieldNumber = 6;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // string compiler = 7;
  void clear_compiler();
  static const int kCompilerFieldNumber = 7;
  const ::std::string& compiler() const;
  void set_compiler(const ::std::string& value);
  #if LANG_CXX11
  void set_compiler(::std::string&& value);
  #endif
  void set_compiler(const char* value);
  void set_compiler(const char* value, size_t size);
  ::std::string* mutable_compiler();
  ::std::string* release_compiler();
  void set_allocated_compiler(::std::string* compiler);

  // string os = 8;
  void clear_os();
  static const int kOsFieldNumber = 8;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // string problem = 21;
  void clear_problem();
  static const int kProblemFieldNumber = 21;
  const ::std::string& problem() const;
  void set_problem(const ::std::string& value);
  #if LANG_CXX11
  void set_problem(::std::string&& value);
  #endif
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  ::std::string* mutable_problem();
  ::std::string* release_problem();
  void set_allocated_problem(::std::string* problem);

  // string instance = 22;
  void clear_instance();
  static const int kInstanceFieldNumber = 22;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  #if LANG_CXX11
  void set_instance(::std::string&& value);
  #endif
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);

  // string duration = 23;
  void clear_duration();
  static const int kDurationFieldNumber = 23;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string email = 32;
  void clear_email();
  static const int kEmailFieldNumber = 32;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string date = 33;
  void clear_date();
  static const int kDateFieldNumber = 33;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // double obj = 31;
  void clear_obj();
  static const int kObjFieldNumber = 31;
  double obj() const;
  void set_obj(double value);

  // @@protoc_insertion_point(class_scope:pb.Submission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  ::google::protobuf::internal::ArenaStringPtr thread_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr ram_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr compiler_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr problem_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  double obj_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MatrixMultiplication_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatrixMultiplication_Input

// int32 rowNumA = 1;
inline void MatrixMultiplication_Input::clear_rownuma() {
  rownuma_ = 0;
}
inline ::google::protobuf::int32 MatrixMultiplication_Input::rownuma() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Input.rowNumA)
  return rownuma_;
}
inline void MatrixMultiplication_Input::set_rownuma(::google::protobuf::int32 value) {
  
  rownuma_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Input.rowNumA)
}

// int32 numRCAB = 2;
inline void MatrixMultiplication_Input::clear_numrcab() {
  numrcab_ = 0;
}
inline ::google::protobuf::int32 MatrixMultiplication_Input::numrcab() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Input.numRCAB)
  return numrcab_;
}
inline void MatrixMultiplication_Input::set_numrcab(::google::protobuf::int32 value) {
  
  numrcab_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Input.numRCAB)
}

// int32 colNumB = 3;
inline void MatrixMultiplication_Input::clear_colnumb() {
  colnumb_ = 0;
}
inline ::google::protobuf::int32 MatrixMultiplication_Input::colnumb() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Input.colNumB)
  return colnumb_;
}
inline void MatrixMultiplication_Input::set_colnumb(::google::protobuf::int32 value) {
  
  colnumb_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Input.colNumB)
}

// int32 refMultiplicationNum = 4;
inline void MatrixMultiplication_Input::clear_refmultiplicationnum() {
  refmultiplicationnum_ = 0;
}
inline ::google::protobuf::int32 MatrixMultiplication_Input::refmultiplicationnum() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Input.refMultiplicationNum)
  return refmultiplicationnum_;
}
inline void MatrixMultiplication_Input::set_refmultiplicationnum(::google::protobuf::int32 value) {
  
  refmultiplicationnum_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Input.refMultiplicationNum)
}

// -------------------------------------------------------------------

// MatrixMultiplication_Output

// repeated .pb.MatrixMultiplication.Intermediate intermediates = 1;
inline int MatrixMultiplication_Output::intermediates_size() const {
  return intermediates_.size();
}
inline void MatrixMultiplication_Output::clear_intermediates() {
  intermediates_.Clear();
}
inline ::pb::MatrixMultiplication_Intermediate* MatrixMultiplication_Output::mutable_intermediates(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MatrixMultiplication.Output.intermediates)
  return intermediates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Intermediate >*
MatrixMultiplication_Output::mutable_intermediates() {
  // @@protoc_insertion_point(field_mutable_list:pb.MatrixMultiplication.Output.intermediates)
  return &intermediates_;
}
inline const ::pb::MatrixMultiplication_Intermediate& MatrixMultiplication_Output::intermediates(int index) const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Output.intermediates)
  return intermediates_.Get(index);
}
inline ::pb::MatrixMultiplication_Intermediate* MatrixMultiplication_Output::add_intermediates() {
  // @@protoc_insertion_point(field_add:pb.MatrixMultiplication.Output.intermediates)
  return intermediates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Intermediate >&
MatrixMultiplication_Output::intermediates() const {
  // @@protoc_insertion_point(field_list:pb.MatrixMultiplication.Output.intermediates)
  return intermediates_;
}

// repeated .pb.MatrixMultiplication.LinearExpression exprs = 2;
inline int MatrixMultiplication_Output::exprs_size() const {
  return exprs_.size();
}
inline void MatrixMultiplication_Output::clear_exprs() {
  exprs_.Clear();
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Output::mutable_exprs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MatrixMultiplication.Output.exprs)
  return exprs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_LinearExpression >*
MatrixMultiplication_Output::mutable_exprs() {
  // @@protoc_insertion_point(field_mutable_list:pb.MatrixMultiplication.Output.exprs)
  return &exprs_;
}
inline const ::pb::MatrixMultiplication_LinearExpression& MatrixMultiplication_Output::exprs(int index) const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Output.exprs)
  return exprs_.Get(index);
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Output::add_exprs() {
  // @@protoc_insertion_point(field_add:pb.MatrixMultiplication.Output.exprs)
  return exprs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_LinearExpression >&
MatrixMultiplication_Output::exprs() const {
  // @@protoc_insertion_point(field_list:pb.MatrixMultiplication.Output.exprs)
  return exprs_;
}

// -------------------------------------------------------------------

// MatrixMultiplication_LinearExpression

// repeated .pb.MatrixMultiplication.Term terms = 1;
inline int MatrixMultiplication_LinearExpression::terms_size() const {
  return terms_.size();
}
inline void MatrixMultiplication_LinearExpression::clear_terms() {
  terms_.Clear();
}
inline ::pb::MatrixMultiplication_Term* MatrixMultiplication_LinearExpression::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MatrixMultiplication.LinearExpression.terms)
  return terms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Term >*
MatrixMultiplication_LinearExpression::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:pb.MatrixMultiplication.LinearExpression.terms)
  return &terms_;
}
inline const ::pb::MatrixMultiplication_Term& MatrixMultiplication_LinearExpression::terms(int index) const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.LinearExpression.terms)
  return terms_.Get(index);
}
inline ::pb::MatrixMultiplication_Term* MatrixMultiplication_LinearExpression::add_terms() {
  // @@protoc_insertion_point(field_add:pb.MatrixMultiplication.LinearExpression.terms)
  return terms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MatrixMultiplication_Term >&
MatrixMultiplication_LinearExpression::terms() const {
  // @@protoc_insertion_point(field_list:pb.MatrixMultiplication.LinearExpression.terms)
  return terms_;
}

// -------------------------------------------------------------------

// MatrixMultiplication_Term

// double coef = 1;
inline void MatrixMultiplication_Term::clear_coef() {
  coef_ = 0;
}
inline double MatrixMultiplication_Term::coef() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Term.coef)
  return coef_;
}
inline void MatrixMultiplication_Term::set_coef(double value) {
  
  coef_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Term.coef)
}

// int32 id = 2;
inline void MatrixMultiplication_Term::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 MatrixMultiplication_Term::id() const {
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Term.id)
  return id_;
}
inline void MatrixMultiplication_Term::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.MatrixMultiplication.Term.id)
}

// -------------------------------------------------------------------

// MatrixMultiplication_Intermediate

// .pb.MatrixMultiplication.LinearExpression sumA = 1;
inline bool MatrixMultiplication_Intermediate::has_suma() const {
  return this != internal_default_instance() && suma_ != NULL;
}
inline void MatrixMultiplication_Intermediate::clear_suma() {
  if (GetArenaNoVirtual() == NULL && suma_ != NULL) {
    delete suma_;
  }
  suma_ = NULL;
}
inline const ::pb::MatrixMultiplication_LinearExpression& MatrixMultiplication_Intermediate::_internal_suma() const {
  return *suma_;
}
inline const ::pb::MatrixMultiplication_LinearExpression& MatrixMultiplication_Intermediate::suma() const {
  const ::pb::MatrixMultiplication_LinearExpression* p = suma_;
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Intermediate.sumA)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::MatrixMultiplication_LinearExpression*>(
      &::pb::_MatrixMultiplication_LinearExpression_default_instance_);
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Intermediate::release_suma() {
  // @@protoc_insertion_point(field_release:pb.MatrixMultiplication.Intermediate.sumA)
  
  ::pb::MatrixMultiplication_LinearExpression* temp = suma_;
  suma_ = NULL;
  return temp;
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Intermediate::mutable_suma() {
  
  if (suma_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::MatrixMultiplication_LinearExpression>(GetArenaNoVirtual());
    suma_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.MatrixMultiplication.Intermediate.sumA)
  return suma_;
}
inline void MatrixMultiplication_Intermediate::set_allocated_suma(::pb::MatrixMultiplication_LinearExpression* suma) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suma_;
  }
  if (suma) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suma = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suma, submessage_arena);
    }
    
  } else {
    
  }
  suma_ = suma;
  // @@protoc_insertion_point(field_set_allocated:pb.MatrixMultiplication.Intermediate.sumA)
}

// .pb.MatrixMultiplication.LinearExpression sumB = 2;
inline bool MatrixMultiplication_Intermediate::has_sumb() const {
  return this != internal_default_instance() && sumb_ != NULL;
}
inline void MatrixMultiplication_Intermediate::clear_sumb() {
  if (GetArenaNoVirtual() == NULL && sumb_ != NULL) {
    delete sumb_;
  }
  sumb_ = NULL;
}
inline const ::pb::MatrixMultiplication_LinearExpression& MatrixMultiplication_Intermediate::_internal_sumb() const {
  return *sumb_;
}
inline const ::pb::MatrixMultiplication_LinearExpression& MatrixMultiplication_Intermediate::sumb() const {
  const ::pb::MatrixMultiplication_LinearExpression* p = sumb_;
  // @@protoc_insertion_point(field_get:pb.MatrixMultiplication.Intermediate.sumB)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::MatrixMultiplication_LinearExpression*>(
      &::pb::_MatrixMultiplication_LinearExpression_default_instance_);
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Intermediate::release_sumb() {
  // @@protoc_insertion_point(field_release:pb.MatrixMultiplication.Intermediate.sumB)
  
  ::pb::MatrixMultiplication_LinearExpression* temp = sumb_;
  sumb_ = NULL;
  return temp;
}
inline ::pb::MatrixMultiplication_LinearExpression* MatrixMultiplication_Intermediate::mutable_sumb() {
  
  if (sumb_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::MatrixMultiplication_LinearExpression>(GetArenaNoVirtual());
    sumb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.MatrixMultiplication.Intermediate.sumB)
  return sumb_;
}
inline void MatrixMultiplication_Intermediate::set_allocated_sumb(::pb::MatrixMultiplication_LinearExpression* sumb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sumb_;
  }
  if (sumb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sumb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sumb, submessage_arena);
    }
    
  } else {
    
  }
  sumb_ = sumb;
  // @@protoc_insertion_point(field_set_allocated:pb.MatrixMultiplication.Intermediate.sumB)
}

// -------------------------------------------------------------------

// MatrixMultiplication

// -------------------------------------------------------------------

// Submission

// string author = 1;
inline void Submission::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::author() const {
  // @@protoc_insertion_point(field_get:pb.Submission.author)
  return author_.GetNoArena();
}
inline void Submission::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.author)
}
#if LANG_CXX11
inline void Submission::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.author)
}
#endif
inline void Submission::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.author)
}
inline void Submission::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.author)
}
inline ::std::string* Submission::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_author() {
  // @@protoc_insertion_point(field_release:pb.Submission.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.author)
}

// string algorithm = 2;
inline void Submission::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.Submission.algorithm)
  return algorithm_.GetNoArena();
}
inline void Submission::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.algorithm)
}
#if LANG_CXX11
inline void Submission::set_algorithm(::std::string&& value) {
  
  algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.algorithm)
}
#endif
inline void Submission::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.algorithm)
}
inline void Submission::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.algorithm)
}
inline ::std::string* Submission::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.Submission.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.algorithm)
}

// string thread = 3;
inline void Submission::clear_thread() {
  thread_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::thread() const {
  // @@protoc_insertion_point(field_get:pb.Submission.thread)
  return thread_.GetNoArena();
}
inline void Submission::set_thread(const ::std::string& value) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.thread)
}
#if LANG_CXX11
inline void Submission::set_thread(::std::string&& value) {
  
  thread_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.thread)
}
#endif
inline void Submission::set_thread(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.thread)
}
inline void Submission::set_thread(const char* value, size_t size) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.thread)
}
inline ::std::string* Submission::mutable_thread() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.thread)
  return thread_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_thread() {
  // @@protoc_insertion_point(field_release:pb.Submission.thread)
  
  return thread_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_thread(::std::string* thread) {
  if (thread != NULL) {
    
  } else {
    
  }
  thread_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.thread)
}

// string cpu = 4;
inline void Submission::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::cpu() const {
  // @@protoc_insertion_point(field_get:pb.Submission.cpu)
  return cpu_.GetNoArena();
}
inline void Submission::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.cpu)
}
#if LANG_CXX11
inline void Submission::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.cpu)
}
#endif
inline void Submission::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.cpu)
}
inline void Submission::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.cpu)
}
inline ::std::string* Submission::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_cpu() {
  // @@protoc_insertion_point(field_release:pb.Submission.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_cpu(::std::string* cpu) {
  if (cpu != NULL) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.cpu)
}

// string ram = 5;
inline void Submission::clear_ram() {
  ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::ram() const {
  // @@protoc_insertion_point(field_get:pb.Submission.ram)
  return ram_.GetNoArena();
}
inline void Submission::set_ram(const ::std::string& value) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.ram)
}
#if LANG_CXX11
inline void Submission::set_ram(::std::string&& value) {
  
  ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.ram)
}
#endif
inline void Submission::set_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.ram)
}
inline void Submission::set_ram(const char* value, size_t size) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.ram)
}
inline ::std::string* Submission::mutable_ram() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.ram)
  return ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_ram() {
  // @@protoc_insertion_point(field_release:pb.Submission.ram)
  
  return ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_ram(::std::string* ram) {
  if (ram != NULL) {
    
  } else {
    
  }
  ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.ram)
}

// string language = 6;
inline void Submission::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::language() const {
  // @@protoc_insertion_point(field_get:pb.Submission.language)
  return language_.GetNoArena();
}
inline void Submission::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.language)
}
#if LANG_CXX11
inline void Submission::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.language)
}
#endif
inline void Submission::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.language)
}
inline void Submission::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.language)
}
inline ::std::string* Submission::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_language() {
  // @@protoc_insertion_point(field_release:pb.Submission.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.language)
}

// string compiler = 7;
inline void Submission::clear_compiler() {
  compiler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::compiler() const {
  // @@protoc_insertion_point(field_get:pb.Submission.compiler)
  return compiler_.GetNoArena();
}
inline void Submission::set_compiler(const ::std::string& value) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.compiler)
}
#if LANG_CXX11
inline void Submission::set_compiler(::std::string&& value) {
  
  compiler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.compiler)
}
#endif
inline void Submission::set_compiler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.compiler)
}
inline void Submission::set_compiler(const char* value, size_t size) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.compiler)
}
inline ::std::string* Submission::mutable_compiler() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.compiler)
  return compiler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_compiler() {
  // @@protoc_insertion_point(field_release:pb.Submission.compiler)
  
  return compiler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_compiler(::std::string* compiler) {
  if (compiler != NULL) {
    
  } else {
    
  }
  compiler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compiler);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.compiler)
}

// string os = 8;
inline void Submission::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::os() const {
  // @@protoc_insertion_point(field_get:pb.Submission.os)
  return os_.GetNoArena();
}
inline void Submission::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.os)
}
#if LANG_CXX11
inline void Submission::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.os)
}
#endif
inline void Submission::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.os)
}
inline void Submission::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.os)
}
inline ::std::string* Submission::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_os() {
  // @@protoc_insertion_point(field_release:pb.Submission.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.os)
}

// string problem = 21;
inline void Submission::clear_problem() {
  problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::problem() const {
  // @@protoc_insertion_point(field_get:pb.Submission.problem)
  return problem_.GetNoArena();
}
inline void Submission::set_problem(const ::std::string& value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.problem)
}
#if LANG_CXX11
inline void Submission::set_problem(::std::string&& value) {
  
  problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.problem)
}
#endif
inline void Submission::set_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.problem)
}
inline void Submission::set_problem(const char* value, size_t size) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.problem)
}
inline ::std::string* Submission::mutable_problem() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.problem)
  return problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_problem() {
  // @@protoc_insertion_point(field_release:pb.Submission.problem)
  
  return problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_problem(::std::string* problem) {
  if (problem != NULL) {
    
  } else {
    
  }
  problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), problem);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.problem)
}

// string instance = 22;
inline void Submission::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::instance() const {
  // @@protoc_insertion_point(field_get:pb.Submission.instance)
  return instance_.GetNoArena();
}
inline void Submission::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.instance)
}
#if LANG_CXX11
inline void Submission::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.instance)
}
#endif
inline void Submission::set_instance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.instance)
}
inline void Submission::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.instance)
}
inline ::std::string* Submission::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_instance() {
  // @@protoc_insertion_point(field_release:pb.Submission.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.instance)
}

// string duration = 23;
inline void Submission::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::duration() const {
  // @@protoc_insertion_point(field_get:pb.Submission.duration)
  return duration_.GetNoArena();
}
inline void Submission::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.duration)
}
#if LANG_CXX11
inline void Submission::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.duration)
}
#endif
inline void Submission::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.duration)
}
inline void Submission::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.duration)
}
inline ::std::string* Submission::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_duration() {
  // @@protoc_insertion_point(field_release:pb.Submission.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.duration)
}

// double obj = 31;
inline void Submission::clear_obj() {
  obj_ = 0;
}
inline double Submission::obj() const {
  // @@protoc_insertion_point(field_get:pb.Submission.obj)
  return obj_;
}
inline void Submission::set_obj(double value) {
  
  obj_ = value;
  // @@protoc_insertion_point(field_set:pb.Submission.obj)
}

// string email = 32;
inline void Submission::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::email() const {
  // @@protoc_insertion_point(field_get:pb.Submission.email)
  return email_.GetNoArena();
}
inline void Submission::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.email)
}
#if LANG_CXX11
inline void Submission::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.email)
}
#endif
inline void Submission::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.email)
}
inline void Submission::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.email)
}
inline ::std::string* Submission::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_email() {
  // @@protoc_insertion_point(field_release:pb.Submission.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.email)
}

// string date = 33;
inline void Submission::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::date() const {
  // @@protoc_insertion_point(field_get:pb.Submission.date)
  return date_.GetNoArena();
}
inline void Submission::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.date)
}
#if LANG_CXX11
inline void Submission::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.date)
}
#endif
inline void Submission::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.date)
}
inline void Submission::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.date)
}
inline ::std::string* Submission::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_date() {
  // @@protoc_insertion_point(field_release:pb.Submission.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MatrixMultiplication_2eproto
